{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    em: \"em\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://avatars.githubusercontent.com/u/5429470?s=200&v=4\",\n        alt: \"N|Solid\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Resumen\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Como sabemos, Docker Compose es una herramienta para definir y administrar multiples contenedores de una vez. Docker Compose establece una red dedicada para los contenedores que hemos definido, habilitando la comunicacion entre ellos. Como resultado, nosotros podemos crear y correr servicios con una configuracion en el archivo docker-compose.yml usando simplemente un único comando.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"En este artículo veremos dos propiedades de YAML que nos permitirán customizar nuestra red de los contenedores, con \", _jsx(_components.em, {\n        children: \"expose\"\n      }), \" y \", _jsx(_components.em, {\n        children: \"ports\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Expose\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Primeramente, echemos un ojo a la configuracion de \", _jsx(_components.em, {\n        children: \"expose\"\n      }), \". Esta propiedad define los puertos que Docker Compose expone desde el contenedor.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Estos puertos serán accesibles desde otros servicios conectadis a la misma red (\", _jsx(_components.em, {\n        children: \"network\"\n      }), \"), pero no serñan publicados en el ordenador o la máquina que proporciona el host.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Podemos exponer el puerto especificando su numero en la seccion de \", _jsx(_components.em, {\n        children: \"services\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-shell\",\n      children: _jsxs(_components.code, {\n        className: \"language-shell\",\n        children: [\"services:\\r\\n  myapp1:\\r\\n    \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"..\"\n        }), \".\\r\\n    expose:\\r\\n      - \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"3000\\\"\"\n        }), \"\\r\\n      - \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"8000\\\"\"\n        }), \"\\r\\n  myapp2:\\r\\n    \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"..\"\n        }), \".\\r\\n    expose:\\r\\n      - \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"5000\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Como podemos ver, podemos especificar multiples valores para cada servicio. En este caso, hemos expuesto los puertos 3000 y 8000 para el contendor \", _jsx(_components.em, {\n        children: \"myapp1.\"\n      }), \"  y para el contendor \", _jsx(_components.em, {\n        children: \"myapp2\"\n      }), \" el puerto 5000. Los servicios ahora son accesibles desde estos puertos por otros contenedores en la misma red (\", _jsx(_components.em, {\n        children: \"network\"\n      }), \").\\r\\nEchemos un ojo a los puertos expuestos.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-js\",\n      children: _jsxs(_components.code, {\n        className: \"language-js\",\n        children: [_jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \" docker ps\\r\\n\", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"CONTAINER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"ID\"\n        }), \"   \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"IMAGE\"\n        }), \"    \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"COMMAND\"\n        }), \"     \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"CREATED\"\n        }), \"     \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"STATUS\"\n        }), \"      \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"PORTS\"\n        }), \"               \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"NAMES\"\n        }), \"\\r\\n\", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8673\"\n        }), \"c14f18d1   \", _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), \"      \", _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), \"         \", _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), \"         \", _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), \"         \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3000\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"tcp\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8000\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"tcp  bael_myapp1\\r\\nbc044e180131   \", _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), \"      \", _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), \"         \", _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), \"         \", _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), \"         \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"5000\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"tcp            bael_myapp2\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"En la salida del comando \", _jsx(_components.em, {\n        children: \"docker\"\n      }), \"*.ps*, podemos encontrar los puertos que estan expuestos en la columna PORTS.\\r\\nFinalmente, verifiquemos la comunicacion entre los contenedores con el siguiente comando.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-js\",\n      children: _jsxs(_components.code, {\n        className: \"language-js\",\n        children: [_jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \" docker exec \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \"it bc044e180131 \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"bin\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"bash\\r\\n\\r\\nbash\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"5.1\"\n        }), \"$ nc \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \"vz myapp1 \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3000\"\n        }), \"\\r\\n\", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"myapp1\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"172.18\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".1\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3000\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" open\\r\\nbash\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"5.1\"\n        }), \"$ nc \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \"vz myapp1 \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8000\"\n        }), \"\\r\\n\", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"myapp1\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"172.18\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".1\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8000\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" open\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Acabamos de conectarnos a la CLI de \", _jsx(_components.em, {\n        children: \"myapp2\"\n      }), \". Usando el comando \", _jsx(_components.em, {\n        children: \"netcat\"\n      }), \", comprobamos que los dos puertos expuestos desde myapp1 estan comunicados.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"PORTS\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ahora, echemos un ojo a PORTS. Como el comnado de antes, esta propiedad define los puertos que queremos que esten expuestos desde el contenedor. A diferencia de la configuracion de EXPOSE, la configuracion de PORTS permite que estos puertos que especifiquemos sean accesibles internamente y publicados en la \", _jsx(_components.em, {\n        children: \"maquina host\"\n      }), \" o el ordenador.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Como antes, nosotros podemos definir los puertos de cada servicio, pero la configuracion es un poco mas compleja. Primero, nosotros tenemos que elegir dos sintaxis, la corta o la larga, para definir la configuracion.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Sintaxis Corta\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Empezemos analizando la corta, La corta esta separada por dos puntos para establecer la dirección IP del HOST, el puerto del HOST y el puerto del contenedor.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Definamos los puertos en el archivo Docker Compose.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-js\",\n      children: _jsxs(_components.code, {\n        className: \"language-js\",\n        children: [_jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"HOST\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"CONTENDOR\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"PROTOCOL\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Aquí el HOST es un número de puerto de host o un rango de números de puerto que puede ir precedido de una dirección IP. Si no especificamos la dirección IP, Docker Compose vincula el puerto a todas las interfaces de red\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"El CONTENEDOR define un número de puerto del contenedor o un rango de números de puerto.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"El PROTOCOL restringe los puertos de los contenedores al protocolo especificado o los establece como TCP si están vacíos. Sólo la parte de CONTAINER es obligatoria.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ahora que conocemos la sintaxis, vamos a definir los puertos en nuestro archivo Docker Compose:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-js\",\n      children: _jsxs(_components.code, {\n        className: \"language-js\",\n        children: [\"services\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \"\\r\\n  myapp1\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), \"\\r\\n    ports\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"3000\\\"\"\n        }), \"                             # container \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"port\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3000\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" assigned to random host port\\r\\n    \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"3001-3005\\\"\"\n        }), \"                        # container port \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"range\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3001\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3005\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" assigned to random host ports\\r\\n    \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"8000:8000\\\"\"\n        }), \"                        # container \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"port\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8000\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" assigned to given host \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"port\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8000\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"9090-9091:8080-8081\\\"\"\n        }), \"              # container port \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"range\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8080\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8081\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" assigned to given host port \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"range\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"9090\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"9091\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"127.0.0.1:8002:8002\\\"\"\n        }), \"              # container \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"port\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8002\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" assigned to given host \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"port\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8002\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" and bind to \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"127.0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".1\"\n        }), \"\\r\\n    \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"6060:6060/udp\\\"\"\n        }), \"                    # container \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"port\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"6060\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" restricted to \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"UDP\"\n        }), \" protocol\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" assigned to given \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"host\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"6060\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Como se ha presentado anteriormente, también podemos publicar múltiples puertos de contenedores a la vez, utilizando diferentes variantes de la sintaxis corta y configurándola de forma más precisa. Docker Compose expone todos los puertos de contenedor especificados, haciéndolos accesibles interna y externamente desde la máquina local.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Como antes, vamos a comprobar los puertos expuestos con el comando docker ps:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-js\",\n      children: _jsxs(_components.code, {\n        className: \"language-js\",\n        children: [_jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \" docker ps \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \"a\\r\\n\", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"CONTAINER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"ID\"\n        }), \"   \", _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"PORTS\"\n        }), \"                                                                        \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"NAMES\"\n        }), \"\\r\\ne8c65b9eec91   \", _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0.0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"51060\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3000\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"tcp\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0.0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"51063\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3001\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"tcp\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0.0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"51064\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3002\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"tcp\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"   bael_myapp1\\r\\n                   \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0.0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"51065\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3003\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"tcp\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0.0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"51061\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3004\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"tcp\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0.0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"51062\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"3005\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"tcp\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \\r\\n                   \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0.0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8000\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8000\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"tcp\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0.0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"9090\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8080\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"tcp\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0.0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"9091\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8081\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"tcp\\r\\n                   \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"127.0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".1\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8002\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"8002\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"tcp\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"0.0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"6060\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \"6060\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"/\"\n        }), \"udp\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Una vez más, en la columna PORTS, podemos encontrar todos los puertos expuestos. El valor a la izquierda de la flecha muestra la dirección del host donde podemos alcanzar el contenedor externamente.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Sintaxis larga\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Utilizando la sintaxis larga, podemos configurar los puertos de la misma manera. Sin embargo, en lugar de utilizar una cadena separada por dos puntos, definimos cada propiedad individualmente:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-js\",\n      children: _jsxs(_components.code, {\n        className: \"language-js\",\n        children: [\"services\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \\r\\n  myapp1\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \"\\r\\n  \", _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), \"\\r\\n  ports\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \"\\r\\n  # \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"127.0.0.1:6060:6060/udp\\\"\"\n        }), \"\\r\\n  \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), \" target\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"6060\"\n        }), \"\\r\\n    host_ip\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"127.0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"token number\",\n          children: \".1\"\n        }), \"\\r\\n    published\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token number\",\n          children: \"6060\"\n        }), \"\\r\\n    protocol\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" udp\\r\\n    mode\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" host\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Aquí, el target es obligatorio y especifica el puerto del contenedor (o rango de puertos) que será expuesto, lo que equivale al CONTAINER en la sintaxis corta.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"El host_ip y published son partes de HOST en la corta, donde podemos definir la dirección IP y el puerto del host.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"El protocolo, igual que PROTOCOL en la sintaxis corta, restringe el puerto del contenedor al protocolo especificado (o TCP si está vacío).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"El modo es el enum con dos valores que especifica las reglas de publicación del puerto. Debemos usar el valor host para publicar un puerto localmente. El segundo valor - ingress - está reservado para entornos de contenedores más complejos y significa que el puerto será equilibrado en carga.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"En conclusión, cualquier cadena de sintaxis corta puede ser fácilmente representada por una estructura larga. Sin embargo, no todas las configuraciones de sintaxis larga pueden ser trasladadas a la corta debido a la falta de una propiedad de modo.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Conclusión\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"En este artículo, acabamos de cubrir una parte de las configuraciones de red en el Docker Compose. Hemos analizado y comparado la configuración de puertos mediante las secciones expose y ports.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"La sección expose nos permite exponer puertos específicos de nuestro contenedor sólo a otros servicios en la misma red. Podemos hacerlo simplemente especificando los puertos del contenedor.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"La sección ports también expone los puertos especificados de los contenedores. A diferencia de la anterior, los puertos se abren no sólo para otros servicios en la misma red sino también para el host. La configuración es un poco más compleja, donde podemos configurar el puerto expuesto, la dirección de enlace local y el protocolo restringido. Dependiendo de nuestras preferencias, podemos elegir entre dos sintaxis diferentes.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"frontmatter":{"slug":"diferencia-entre-export-ports-dockercompose","title":"🐋 Diferencia entre Expose y Ports en Docker Compose","date":"🗓️Julio 10, 2022","tags":"DevOps,💻Informatica","fecha":"2022-07-10","descripcion":"Encuentra las diferencias en Docker entre Expose y Ports."}},"__N_SSG":true}